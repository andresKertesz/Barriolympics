@page "/imagenes-juego"

@using BarriolympicsRadzen.Data
@using BarriolympicsRadzen.Data.Models
@using BarriolympicsRadzen.Controllers

@inject AuthenticationController auth
@inject BarriolympicsRadzen.Controllers.DatabaseController db
@inject ApplicationDbContext dbContext
@inject NavigationManager nav
@inject DialogService dialog
@inject NotificationService notif

<h3>Imágenes por Juego</h3>

<RadzenStack Orientation="Radzen.Orientation.Vertical">
    <RadzenRow Style="width:100%">
        <RadzenButton Style="width: 100px" ButtonStyle="Radzen.ButtonStyle.Success" Text="Nuevo" Click="Add" Icon="add_circle" />
    </RadzenRow>

    <RadzenDataGrid TItem="ImagenesJuego" Data="imagenes">
        <Columns>
            <RadzenDataGridColumn Title="Acciones" Width="150px">
                <Template Context="element">
                    <RadzenButton Icon="edit" Click="@(() => Edit(element))" ButtonStyle="Radzen.ButtonStyle.Primary" />
                    <RadzenButton Icon="delete" Click="@(() => Delete(element))" ButtonStyle="Radzen.ButtonStyle.Danger" />
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Title="Imagen">
                <Template Context="element">
                    <img src="@element.Url" style="width: 100px; height: auto;" />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="Descripcion" Title="Descripción" />
            <RadzenDataGridColumn Property="JuegoId" Title="Juego" />
        </Columns>
    </RadzenDataGrid>
</RadzenStack>

@code {
    private List<ImagenesJuego> imagenes;

    protected override Task OnInitializedAsync()
    {
        if (auth.GetLoggedInUser() == null)
        {
            nav.NavigateTo("/");
        }

        imagenes = dbContext.ImagenesJuegos.ToList();
        return base.OnInitializedAsync();
    }

    protected async Task Add()
    {
        await LaunchDialog();
    }

    protected async Task Edit(ImagenesJuego imagen)
    {
        await LaunchDialog(imagen);
    }

    private async Task LaunchDialog(ImagenesJuego? imagen = null)
    {
        await dialog.OpenAsync<ImagenesJuegoAddEdit>(imagen == null ? "Crear" : "Editar Imagen", new()
        {
            { "EditMode", imagen != null },
            { "EditObject", imagen }
        },
        new()
            {
                Width = "500px",
                Height = "auto",
                Resizable = false
            });

        imagenes = dbContext.ImagenesJuegos.ToList();
    }

    protected async Task Delete(ImagenesJuego imagen)
    {
        var confirmed = await dialog.Confirm($"\u00bfBorrar imagen?", "Eliminar", new ConfirmOptions
            {
                OkButtonText = "Sí",
                CancelButtonText = "No"
            });

        if (confirmed == true)
        {
            try
            {
                dbContext.ImagenesJuegos.Remove(imagen);
                await dbContext.SaveChangesAsync();

                notif.Notify(new NotificationMessage
                    {
                        CloseOnClick = true,
                        Severity = NotificationSeverity.Success,
                        Summary = "Éxito",
                        Detail = "Imagen eliminada correctamente"
                    });

                imagenes = dbContext.ImagenesJuegos.ToList();
            }
            catch (Exception ex)
            {
                notif.Notify(new NotificationMessage
                    {
                        CloseOnClick = true,
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = ex.ToString()
                    });
            }
        }
    }
}