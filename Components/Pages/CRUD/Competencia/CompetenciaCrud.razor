@using BarriolympicsRadzen.Data
@using BarriolympicsRadzen.Data.Models
@using BarriolympicsRadzen.Controllers


@inject AuthenticationController auth
@inject BarriolympicsRadzen.Controllers.DatabaseController db
@inject ApplicationDbContext dbContext
@inject NavigationManager nav
@inject DialogService dialog
@inject NotificationService notif


<h3>Competencia</h3>
<RadzenStack Orientation="Radzen.Orientation.Vertical">
    <RadzenRow Style="width:100%">
        <RadzenButton Style="width: 100px" ButtonStyle="Radzen.ButtonStyle.Success" Text="Nuevo" Click="Add" Icon="add_circle"></RadzenButton>
    </RadzenRow>
    <RadzenDataGrid TItem="Competencium" Data="competencias">
        <Columns>
            <RadzenDataGridColumn Title="Editar" Width="100px">
                <Template Context="element">
                    <RadzenButton Icon="edit" Style="" Click="@(()=>Edit(element))" ButtonStyle="Radzen.ButtonStyle.Primary"></RadzenButton>
                    <RadzenButton Icon="delete" Style="" Click="@(()=>Delete(element))" ButtonStyle="Radzen.ButtonStyle.Danger"></RadzenButton>
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Property="Competencium.Nombre" Title="Nombre"></RadzenDataGridColumn>
            
            <RadzenDataGridColumn Title="Tipo" >
                <Template Context="element">
                    <RadzenLabel Text="@GetType(element.Tipo).Nombre"></RadzenLabel>
                </Template>
            </RadzenDataGridColumn>
            
            <RadzenDataGridColumn Property="Competencium.Imagen" Title="Imagen"></RadzenDataGridColumn>
            <RadzenDataGridColumn Property="Competencium.Fecha" Title="Fecha"></RadzenDataGridColumn>

        </Columns>

    </RadzenDataGrid>
</RadzenStack>

@code {
    private List<Competencium> competencias;

    protected override Task OnInitializedAsync()
    {
        if(auth.GetLoggedInUser() == null)
        {
            nav.NavigateTo("/");
        }
        competencias = dbContext.Competencia.ToList();
        return base.OnInitializedAsync();

    }
    private string GetColorRowStyle(string color)
    {

        return $"width:32px;height:100%;background-color:{color}";
    }
    private Evento? GetEvento(Guid? guid)
    {
        return dbContext.Eventos.Where(x => x.Id == guid).FirstOrDefault();
    }
    private TipoCompetencium? GetType(Guid? guid)
    {
        return dbContext.TipoCompetencia.Where(x => x.Id == guid).FirstOrDefault();
    }
    protected async Task Add()
    {
        await LaunchDialog();
    }

    protected async Task Edit(Competencium barriero)
    {
        await LaunchDialog(barriero);
    }

    private async Task LaunchDialog(Competencium? competencia = null)
    {
        
        await dialog.OpenAsync<CompetenciaAddEdit>(competencia == null ? "Crear" : $"Editar {competencia.Nombre}", new()
        {
            { "EditMode",competencia != null},{ "EditObject",competencia}
        },
        new()
            {
                Width = "400px",
                Height = "auto",
                Resizable = false
            });
        competencias = dbContext.Competencia.ToList();
    }

    protected async Task Delete(Competencium copa)
    {
        var confirmed = await dialog.Confirm($"Borrar {copa.Nombre}?", "Eliminar", new ConfirmOptions()
        {
            OkButtonText = "Si",
            CancelButtonText = "No"
        });
        try
        {


            if (confirmed.HasValue && confirmed.Value)
            {
                {
                    dbContext.Remove(copa);
                    await dbContext.SaveChangesAsync();
                }
            }
            notif.Notify(new()
                {
                    CloseOnClick = true,
                    Severity = NotificationSeverity.Error,
                    Summary = "Exito",
                    Detail = "Registro borrado correctamente"
                });
            competencias = dbContext.Competencia.ToList();

        }
        catch (Exception ex)
        {
            notif.Notify(new()
                {
                    CloseOnClick = true,
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.ToString()
                });
        }
    }
    
}
